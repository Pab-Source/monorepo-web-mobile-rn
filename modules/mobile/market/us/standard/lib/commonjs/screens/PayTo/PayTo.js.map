{"version":3,"sources":["PayTo.tsx"],"names":["PayTo","contactList","list","navigation","contacts","setContacts","handleChange","value","filtered","filter","contact","JSON","stringify","toLowerCase","includes","handleSelect","payTo","navigate","label","name","phone","flex","Container","Header","Title","InputSearch","ContactList","ContactItem"],"mappings":";;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAyCA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAtCO,MAAMA,KAAK,GAAG,QAAgD;AAAA,MAA/C;AAAEC,IAAAA,WAAW,GAAGC,eAAhB;AAAsBC,IAAAA;AAAtB,GAA+C;AACnE,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0B,qBAASJ,WAAT,CAAhC;;AAEA,QAAMK,YAAY,GAAIC,KAAD,IAAmB;AACtC,UAAMC,QAAQ,GAAGN,gBAAKO,MAAL,CAAaC,OAAD,IAC3BC,IAAI,CAACC,SAAL,CAAeF,OAAf,EAAwBG,WAAxB,GAAsCC,QAAtC,CAA+CP,KAA/C,CADe,CAAjB;;AAIAF,IAAAA,WAAW,CAACG,QAAD,CAAX;AACD,GAND;;AAQA,QAAMO,YAAY,GAAIC,KAAD,IAA4C;AAC/Db,IAAAA,UAAU,CAACc,QAAX,CAAoB,SAApB,EAA+B;AAC7BD,MAAAA,KAAK,EAAE;AACLE,QAAAA,KAAK,EAAE,QADF;AAELX,QAAAA,KAAK,EAAG,GAAES,KAAK,CAACG,IAAK,KAAIH,KAAK,CAACI,KAAM,EAFhC;AAGLD,QAAAA,IAAI,EAAEH,KAAK,CAACG;AAHP;AADsB,KAA/B;AAOD,GARD;;AAUA,sBACE,6BAAC,sBAAD;AAAW,IAAA,KAAK,EAAE;AAAEE,MAAAA,IAAI,EAAE;AAAR;AAAlB,kBACE,6BAAC,mBAAD,OADF,eAEE,6BAAC,kBAAD,iBAFF,eAGE,6BAAC,uBAAD;AAAa,IAAA,QAAQ,EAAEf;AAAvB,IAHF,eAIE,6BAAC,uBAAD;AAAa,IAAA,QAAQ,EAAEF,QAAvB;AAAiC,IAAA,QAAQ,EAAEW;AAA3C,IAJF,CADF;AAQD,CA7BM;;;AA+BPf,KAAK,CAACsB,SAAN,GAAkBA,sBAAlB;AACAtB,KAAK,CAACuB,MAAN,GAAeA,mBAAf;AACAvB,KAAK,CAACwB,KAAN,GAAcA,kBAAd;AACAxB,KAAK,CAACyB,WAAN,GAAoBA,uBAApB;AACAzB,KAAK,CAAC0B,WAAN,GAAoBA,uBAApB;AACA1B,KAAK,CAAC2B,WAAN,GAAoBA,uBAApB","sourcesContent":["import React, { useState } from 'react';\nimport { InputSearch, ContactList, ContactItem } from './components';\nimport { Header, Title, Container } from '../../components';\nimport { list } from './constants';\nimport type { IPayTo } from './types';\n\nexport const PayTo = ({ contactList = list, navigation }: IPayTo) => {\n  const [contacts, setContacts] = useState(contactList);\n\n  const handleChange = (value: string) => {\n    const filtered = list.filter((contact) =>\n      JSON.stringify(contact).toLowerCase().includes(value)\n    );\n\n    setContacts(filtered);\n  };\n\n  const handleSelect = (payTo: { name: string; phone: string }) => {\n    navigation.navigate('PayFrom', {\n      payTo: {\n        label: 'Pay to',\n        value: `${payTo.name}, ${payTo.phone}`,\n        name: payTo.name,\n      },\n    });\n  };\n\n  return (\n    <Container style={{ flex: 1 }}>\n      <Header />\n      <Title>Pay to</Title>\n      <InputSearch onChange={handleChange} />\n      <ContactList contacts={contacts} onChange={handleSelect} />\n    </Container>\n  );\n};\n\nPayTo.Container = Container;\nPayTo.Header = Header;\nPayTo.Title = Title;\nPayTo.InputSearch = InputSearch;\nPayTo.ContactList = ContactList;\nPayTo.ContactItem = ContactItem;\n\nexport * from './types';\n"]}